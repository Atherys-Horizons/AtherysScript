package com.atherys.script.library.event;

import com.atherys.script.api.event.ScriptReloadEvent;
import com.atherys.script.api.event.ScriptStartEvent;
import com.atherys.script.api.event.ScriptStopEvent;
import com.atherys.script.api.library.LibraryExtension;
import com.atherys.script.api.library.ScriptLibrary;
import com.atherys.script.js.event.JSScriptReloadEvent;
import com.atherys.script.js.event.JSScriptStartEvent;
import com.atherys.script.js.event.JSScriptStopEvent;
import org.spongepowered.api.event.GenericEvent;
import org.spongepowered.api.event.action.*;
import org.spongepowered.api.event.advancement.AdvancementEvent;
import org.spongepowered.api.event.advancement.AdvancementTreeEvent;
import org.spongepowered.api.event.advancement.CriterionEvent;
import org.spongepowered.api.event.block.*;
import org.spongepowered.api.event.block.tileentity.BrewingEvent;
import org.spongepowered.api.event.block.tileentity.ChangeSignEvent;
import org.spongepowered.api.event.block.tileentity.SmeltEvent;
import org.spongepowered.api.event.block.tileentity.TargetTileEntityEvent;
import org.spongepowered.api.event.command.SendCommandEvent;
import org.spongepowered.api.event.command.TabCompleteEvent;
import org.spongepowered.api.event.economy.EconomyTransactionEvent;
import org.spongepowered.api.event.entity.*;
import org.spongepowered.api.event.entity.ai.AITaskEvent;
import org.spongepowered.api.event.entity.ai.SetAITargetEvent;
import org.spongepowered.api.event.entity.explosive.*;
import org.spongepowered.api.event.entity.item.ItemMergeItemEvent;
import org.spongepowered.api.event.entity.item.TargetItemEvent;
import org.spongepowered.api.event.entity.living.TargetAgentEvent;
import org.spongepowered.api.event.entity.living.TargetLivingEvent;
import org.spongepowered.api.event.entity.living.humanoid.*;
import org.spongepowered.api.event.entity.living.humanoid.player.*;
import org.spongepowered.api.event.entity.projectile.LaunchProjectileEvent;
import org.spongepowered.api.event.entity.projectile.TargetProjectileEvent;
import org.spongepowered.api.event.game.GameRegistryEvent;
import org.spongepowered.api.event.game.GameReloadEvent;
import org.spongepowered.api.event.game.state.*;
import org.spongepowered.api.event.item.inventory.*;
import org.spongepowered.api.event.message.MessageChannelEvent;
import org.spongepowered.api.event.message.MessageEvent;
import org.spongepowered.api.event.network.BanIpEvent;
import org.spongepowered.api.event.network.ChannelRegistrationEvent;
import org.spongepowered.api.event.network.ClientConnectionEvent;
import org.spongepowered.api.event.network.PardonIpEvent;
import org.spongepowered.api.event.network.rcon.RconConnectionEvent;
import org.spongepowered.api.event.server.ClientPingServerEvent;
import org.spongepowered.api.event.server.query.QueryServerEvent;
import org.spongepowered.api.event.service.ChangeServiceProviderEvent;
import org.spongepowered.api.event.statistic.ChangeStatisticEvent;
import org.spongepowered.api.event.user.BanUserEvent;
import org.spongepowered.api.event.user.PardonUserEvent;
import org.spongepowered.api.event.user.TargetUserEvent;
import org.spongepowered.api.event.world.*;
import org.spongepowered.api.event.world.chunk.*;

public final class EventLibrary implements LibraryExtension {

    @Override
    public void extend(ScriptLibrary library) {
        library.put("onEntityDamage", new EventHandlerFunction<>(DamageEntityEvent.class));
        library.put("onEntityMove", new EventHandlerFunction<>(MoveEntityEvent.class));
        library.put("onScriptStart", new EventHandlerFunction<>(ScriptStartEvent.class));
        library.put("onScriptReload", new EventHandlerFunction<>(ScriptReloadEvent.class));
        library.put("onScriptStop", new EventHandlerFunction<>(ScriptStopEvent.class));
        library.put("onGrantAdvancement", new EventHandlerFunction<>(AdvancementEvent.Grant.class));
        library.put("onRevokeAdvancement", new EventHandlerFunction<>(AdvancementEvent.Revoke.class));
        library.put("onGenerateLayoutAdvancementTree", new EventHandlerFunction<>(AdvancementTreeEvent.GenerateLayout.class));
        library.put("onAffectEntity", new EventHandlerFunction<>(AffectEntityEvent.class));
        library.put("onAffectItemStack", new EventHandlerFunction<>(AffectItemStackEvent.class));
        library.put("onAffectSlot", new EventHandlerFunction<>(AffectSlotEvent.class));
        library.put("onAITask", new EventHandlerFunction<>(AITaskEvent.class));
        library.put("onRemoveAITask", new EventHandlerFunction<>(AITaskEvent.Remove.class));
        library.put("onAnimateHand", new EventHandlerFunction<>(AnimateHandEvent.class));
        library.put("onAttackEntity", new EventHandlerFunction<>(AttackEntityEvent.class));
        library.put("onBanIp", new EventHandlerFunction<>(BanIpEvent.class));
        library.put("onTargetPlayerBanUser", new EventHandlerFunction<>(BanUserEvent.TargetPlayer.class));
        library.put("onBreedBreedEntity", new EventHandlerFunction<>(BreedEntityEvent.Breed.class));
        library.put("onFindMateBreedEntity", new EventHandlerFunction<>(BreedEntityEvent.FindMate.class));
        library.put("onBrewing", new EventHandlerFunction<>(BrewingEvent.class));
        library.put("onFinishBrewing", new EventHandlerFunction<>(BrewingEvent.Finish.class));
        library.put("onInterruptBrewing", new EventHandlerFunction<>(BrewingEvent.Interrupt.class));
        library.put("onStartBrewing", new EventHandlerFunction<>(BrewingEvent.Start.class));
        library.put("onTickBrewing", new EventHandlerFunction<>(BrewingEvent.Tick.class));
        library.put("onBreakChangeBlock", new EventHandlerFunction<>(ChangeBlockEvent.Break.class));
        library.put("onDecayChangeBlock", new EventHandlerFunction<>(ChangeBlockEvent.Decay.class));
        library.put("onGrowChangeBlock", new EventHandlerFunction<>(ChangeBlockEvent.Grow.class));
        library.put("onModifyChangeBlock", new EventHandlerFunction<>(ChangeBlockEvent.Modify.class));
        library.put("onPlaceChangeBlock", new EventHandlerFunction<>(ChangeBlockEvent.Place.class));
        library.put("onTargetHumanoidChangeEntityEquipment", new EventHandlerFunction<>(ChangeEntityEquipmentEvent.TargetHumanoid.class));
        library.put("onTargetLivingChangeEntityEquipment", new EventHandlerFunction<>(ChangeEntityEquipmentEvent.TargetLiving.class));
        library.put("onTargetPlayerChangeEntityEquipment", new EventHandlerFunction<>(ChangeEntityEquipmentEvent.TargetPlayer.class));
        library.put("onChangeEntityExperience", new EventHandlerFunction<>(ChangeEntityExperienceEvent.class));
        library.put("onExpireChangeEntityPotionEffect", new EventHandlerFunction<>(ChangeEntityPotionEffectEvent.Expire.class));
        library.put("onGainChangeEntityPotionEffect", new EventHandlerFunction<>(ChangeEntityPotionEffectEvent.Gain.class));
        library.put("onRemoveChangeEntityPotionEffect", new EventHandlerFunction<>(ChangeEntityPotionEffectEvent.Remove.class));
        library.put("onChangeGameMode", new EventHandlerFunction<>(ChangeGameModeEvent.class));
        library.put("onChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.class));
        library.put("onEquipmentChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.Equipment.class));
        library.put("onHeldChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.Held.class));
        library.put("onPickupChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.Pickup.class));
        library.put("onPickupPreChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.Pickup.Pre.class));
        library.put("onSwapHandChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.SwapHand.class));
        library.put("onTransferChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.Transfer.class));
        library.put("onTransferPostChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.Transfer.Post.class));
        library.put("onTransferPreChangeInventory", new EventHandlerFunction<>(ChangeInventoryEvent.Transfer.Pre.class));
        library.put("onChangeLevel", new EventHandlerFunction<>(ChangeLevelEvent.class));
        library.put("onTargetPlayerChangeLevel", new EventHandlerFunction<>(ChangeLevelEvent.TargetPlayer.class));
        library.put("onChangeServiceProvider", new EventHandlerFunction<>(ChangeServiceProviderEvent.class));
        library.put("onChangeSign", new EventHandlerFunction<>(ChangeSignEvent.class));
        library.put("onChangeStatistic", new EventHandlerFunction<>(ChangeStatisticEvent.class));
        library.put("onTargetPlayerChangeStatistic", new EventHandlerFunction<>(ChangeStatisticEvent.TargetPlayer.class));
        library.put("onChangeWorldBorder", new EventHandlerFunction<>(ChangeWorldBorderEvent.class));
        library.put("onTargetPlayerChangeWorldBorder", new EventHandlerFunction<>(ChangeWorldBorderEvent.TargetPlayer.class));
        library.put("onTargetWorldChangeWorldBorder", new EventHandlerFunction<>(ChangeWorldBorderEvent.TargetWorld.class));
        library.put("onChangeWorldGameRule", new EventHandlerFunction<>(ChangeWorldGameRuleEvent.class));
        library.put("onChangeWorldWeather", new EventHandlerFunction<>(ChangeWorldWeatherEvent.class));
        library.put("onChannelRegistration", new EventHandlerFunction<>(ChannelRegistrationEvent.class));
        library.put("onRegisterChannelRegistration", new EventHandlerFunction<>(ChannelRegistrationEvent.Register.class));
        library.put("onUnregisterChannelRegistration", new EventHandlerFunction<>(ChannelRegistrationEvent.Unregister.class));
        library.put("onChunkPreGeneration", new EventHandlerFunction<>(ChunkPreGenerationEvent.class));
        library.put("onCancelledChunkPreGeneration", new EventHandlerFunction<>(ChunkPreGenerationEvent.Cancelled.class));
        library.put("onCompleteChunkPreGeneration", new EventHandlerFunction<>(ChunkPreGenerationEvent.Complete.class));
        library.put("onPostChunkPreGeneration", new EventHandlerFunction<>(ChunkPreGenerationEvent.Post.class));
        library.put("onPreChunkPreGeneration", new EventHandlerFunction<>(ChunkPreGenerationEvent.Pre.class));
        library.put("onClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.class));
        library.put("onCreativeClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Creative.class));
        library.put("onDoubleClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Double.class));
        library.put("onDragClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drag.class));
        library.put("onDragPrimaryClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drag.Primary.class));
        library.put("onDragSecondaryClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drag.Secondary.class));
        library.put("onDropClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drop.class));
        library.put("onDropFullClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drop.Full.class));
        library.put("onDropOutsideClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drop.Outside.class));
        library.put("onDropOutsidePrimaryClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drop.Outside.Primary.class));
        library.put("onDropOutsideSecondaryClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drop.Outside.Secondary.class));
        library.put("onDropSingleClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Drop.Single.class));
        library.put("onMiddleClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Middle.class));
        library.put("onNumberPressClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.NumberPress.class));
        library.put("onPrimaryClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Primary.class));
        library.put("onSecondaryClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Secondary.class));
        library.put("onShiftClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Shift.class));
        library.put("onShiftPrimaryClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Shift.Primary.class));
        library.put("onShiftSecondaryClickInventory", new EventHandlerFunction<>(ClickInventoryEvent.Shift.Secondary.class));
        library.put("onClientConnection", new EventHandlerFunction<>(ClientConnectionEvent.class));
        library.put("onAuthClientConnection", new EventHandlerFunction<>(ClientConnectionEvent.Auth.class));
        library.put("onDisconnectClientConnection", new EventHandlerFunction<>(ClientConnectionEvent.Disconnect.class));
        library.put("onJoinClientConnection", new EventHandlerFunction<>(ClientConnectionEvent.Join.class));
        library.put("onLoginClientConnection", new EventHandlerFunction<>(ClientConnectionEvent.Login.class));
        library.put("onClientPingServer", new EventHandlerFunction<>(ClientPingServerEvent.class));
        library.put("onCollideBlock", new EventHandlerFunction<>(CollideBlockEvent.class));
        library.put("onImpactCollideBlock", new EventHandlerFunction<>(CollideBlockEvent.Impact.class));
        library.put("onCollideEntity", new EventHandlerFunction<>(CollideEntityEvent.class));
        library.put("onImpactCollideEntity", new EventHandlerFunction<>(CollideEntityEvent.Impact.class));
        library.put("onCollide", new EventHandlerFunction<>(CollideEvent.class));
        library.put("onImpactCollide", new EventHandlerFunction<>(CollideEvent.Impact.class));
        library.put("onConstructEntity", new EventHandlerFunction<>(ConstructEntityEvent.class));
        library.put("onPostConstructEntity", new EventHandlerFunction<>(ConstructEntityEvent.Post.class));
        library.put("onPreConstructEntity", new EventHandlerFunction<>(ConstructEntityEvent.Pre.class));
        library.put("onConstructPortal", new EventHandlerFunction<>(ConstructPortalEvent.class));
        library.put("onConstructWorldProperties", new EventHandlerFunction<>(ConstructWorldPropertiesEvent.class));
        library.put("onCooldown", new EventHandlerFunction<>(CooldownEvent.class));
        library.put("onEndCooldown", new EventHandlerFunction<>(CooldownEvent.End.class));
        library.put("onSetCooldown", new EventHandlerFunction<>(CooldownEvent.Set.class));
        library.put("onCriterion", new EventHandlerFunction<>(CriterionEvent.class));
        library.put("onGrantCriterion", new EventHandlerFunction<>(AdvancementEvent.Grant.class));
        library.put("onRevokeCriterion", new EventHandlerFunction<>(CriterionEvent.Revoke.class));
        library.put("onScoreCriterion", new EventHandlerFunction<>(CriterionEvent.Score.class));
        library.put("onScoreChangeCriterion", new EventHandlerFunction<>(CriterionEvent.Score.Change.class));
        library.put("onScoreGrantCriterion", new EventHandlerFunction<>(AdvancementEvent.Grant.class));
        library.put("onScoreRevokeCriterion", new EventHandlerFunction<>(CriterionEvent.Score.Revoke.class));
        library.put("onTriggerCriterion", new EventHandlerFunction<>(CriterionEvent.Trigger.class));
        library.put("onDamageEntity", new EventHandlerFunction<>(DamageEntityEvent.class));
        library.put("onDefuseExplosive", new EventHandlerFunction<>(DefuseExplosiveEvent.class));
        library.put("onPostDefuseExplosive", new EventHandlerFunction<>(DefuseExplosiveEvent.Post.class));
        library.put("onPreDefuseExplosive", new EventHandlerFunction<>(DefuseExplosiveEvent.Pre.class));
        library.put("onDestructEntity", new EventHandlerFunction<>(DestructEntityEvent.class));
        library.put("onDeathDestructEntity", new EventHandlerFunction<>(DestructEntityEvent.Death.class));
        library.put("onDetonateExplosive", new EventHandlerFunction<>(DetonateExplosiveEvent.class));
        library.put("onDropItem", new EventHandlerFunction<>(DropItemEvent.class));
        library.put("onCustomDropItem", new EventHandlerFunction<>(DropItemEvent.Custom.class));
        library.put("onDestructDropItem", new EventHandlerFunction<>(DropItemEvent.Destruct.class));
        library.put("onDispenseDropItem", new EventHandlerFunction<>(DropItemEvent.Dispense.class));
        library.put("onPreDropItem", new EventHandlerFunction<>(DropItemEvent.Pre.class));
        library.put("onEconomyTransaction", new EventHandlerFunction<>(EconomyTransactionEvent.class));
        library.put("onExpireEntity", new EventHandlerFunction<>(ExpireEntityEvent.class));
        library.put("onTargetItemExpireEntity", new EventHandlerFunction<>(ExpireEntityEvent.TargetItem.class));
        library.put("onExplosion", new EventHandlerFunction<>(ExplosionEvent.class));
        library.put("onDetonateExplosion", new EventHandlerFunction<>(ExplosionEvent.Detonate.class));
        library.put("onPostExplosion", new EventHandlerFunction<>(ExplosionEvent.Post.class));
        library.put("onPreExplosion", new EventHandlerFunction<>(ExplosionEvent.Pre.class));
        library.put("onFishing", new EventHandlerFunction<>(FishingEvent.class));
        library.put("onHookEntityFishing", new EventHandlerFunction<>(FishingEvent.HookEntity.class));
        library.put("onStartFishing", new EventHandlerFunction<>(FishingEvent.Start.class));
        library.put("onStopFishing", new EventHandlerFunction<>(FishingEvent.Stop.class));
        library.put("onForcedChunk", new EventHandlerFunction<>(ForcedChunkEvent.class));
        library.put("onGameAboutToStartServer", new EventHandlerFunction<>(GameAboutToStartServerEvent.class));
        library.put("onGameConstruction", new EventHandlerFunction<>(GameConstructionEvent.class));
        library.put("onGameInitialization", new EventHandlerFunction<>(GameInitializationEvent.class));
        library.put("onGameLoadComplete", new EventHandlerFunction<>(GameLoadCompleteEvent.class));
        library.put("onGamePostInitialization", new EventHandlerFunction<>(GamePostInitializationEvent.class));
        library.put("onGamePreInitialization", new EventHandlerFunction<>(GamePreInitializationEvent.class));
        library.put("onGameRegistry", new EventHandlerFunction<>(GameRegistryEvent.class));
        library.put("onRegisterGameRegistry", new EventHandlerFunction<>(GameRegistryEvent.Register.class));
        library.put("onGameReload", new EventHandlerFunction<>(GameReloadEvent.class));
        library.put("onGameStartedServer", new EventHandlerFunction<>(GameStartedServerEvent.class));
        library.put("onGameStartingServer", new EventHandlerFunction<>(GameStartingServerEvent.class));
        library.put("onGameState", new EventHandlerFunction<>(GameStateEvent.class));
        library.put("onGameStopped", new EventHandlerFunction<>(GameStoppedEvent.class));
        library.put("onGameStoppedServer", new EventHandlerFunction<>(GameStoppedServerEvent.class));
        library.put("onGameStopping", new EventHandlerFunction<>(GameStoppingEvent.class));
        library.put("onGameStoppingServer", new EventHandlerFunction<>(GameStoppingServerEvent.class));
        library.put("onGenerateChunk", new EventHandlerFunction<>(GenerateChunkEvent.class));
        library.put("onPostGenerateChunk", new EventHandlerFunction<>(GenerateChunkEvent.Post.class));
        library.put("onPreGenerateChunk", new EventHandlerFunction<>(GenerateChunkEvent.Pre.class));
        library.put("onHandInteract", new EventHandlerFunction<>(HandInteractEvent.class));
        library.put("onHarvestEntity", new EventHandlerFunction<>(HarvestEntityEvent.class));
        library.put("onTargetHumanoidHarvestEntity", new EventHandlerFunction<>(HarvestEntityEvent.TargetHumanoid.class));
        library.put("onTargetLivingHarvestEntity", new EventHandlerFunction<>(HarvestEntityEvent.TargetLiving.class));
        library.put("onTargetPlayerHarvestEntity", new EventHandlerFunction<>(HarvestEntityEvent.TargetPlayer.class));
        library.put("onHealEntity", new EventHandlerFunction<>(HealEntityEvent.class));
        library.put("onIgniteEntity", new EventHandlerFunction<>(IgniteEntityEvent.class));
        library.put("onInteractBlock", new EventHandlerFunction<>(InteractBlockEvent.class));
        library.put("onPrimaryInteractBlock", new EventHandlerFunction<>(InteractBlockEvent.Primary.class));
        library.put("onPrimaryMainHandInteractBlock", new EventHandlerFunction<>(InteractBlockEvent.Primary.MainHand.class));
        library.put("onPrimaryOffHandInteractBlock", new EventHandlerFunction<>(InteractBlockEvent.Primary.OffHand.class));
        library.put("onSecondaryInteractBlock", new EventHandlerFunction<>(InteractBlockEvent.Secondary.class));
        library.put("onSecondaryMainHandInteractBlock", new EventHandlerFunction<>(InteractBlockEvent.Secondary.MainHand.class));
        library.put("onSecondaryOffHandInteractBlock", new EventHandlerFunction<>(InteractBlockEvent.Secondary.OffHand.class));
        library.put("onInteractEntity", new EventHandlerFunction<>(InteractEntityEvent.class));
        library.put("onPrimaryInteractEntity", new EventHandlerFunction<>(InteractEntityEvent.Primary.class));
        library.put("onPrimaryMainHandInteractEntity", new EventHandlerFunction<>(InteractEntityEvent.Primary.MainHand.class));
        library.put("onPrimaryOffHandInteractEntity", new EventHandlerFunction<>(InteractEntityEvent.Primary.OffHand.class));
        library.put("onSecondaryInteractEntity", new EventHandlerFunction<>(InteractEntityEvent.Secondary.class));
        library.put("onSecondaryMainHandInteractEntity", new EventHandlerFunction<>(InteractEntityEvent.Secondary.MainHand.class));
        library.put("onSecondaryOffHandInteractEntity", new EventHandlerFunction<>(InteractEntityEvent.Secondary.OffHand.class));
        library.put("onInteract", new EventHandlerFunction<>(InteractEvent.class));
        library.put("onInteractInventory", new EventHandlerFunction<>(InteractInventoryEvent.class));
        library.put("onCloseInteractInventory", new EventHandlerFunction<>(InteractInventoryEvent.Close.class));
        library.put("onOpenInteractInventory", new EventHandlerFunction<>(InteractInventoryEvent.Open.class));
        library.put("onInteractItem", new EventHandlerFunction<>(InteractItemEvent.class));
        library.put("onPrimaryInteractItem", new EventHandlerFunction<>(InteractItemEvent.Primary.class));
        library.put("onPrimaryMainHandInteractItem", new EventHandlerFunction<>(InteractItemEvent.Primary.MainHand.class));
        library.put("onPrimaryOffHandInteractItem", new EventHandlerFunction<>(InteractItemEvent.Primary.OffHand.class));
        library.put("onSecondaryInteractItem", new EventHandlerFunction<>(InteractItemEvent.Secondary.class));
        library.put("onSecondaryMainHandInteractItem", new EventHandlerFunction<>(InteractItemEvent.Secondary.MainHand.class));
        library.put("onSecondaryOffHandInteractItem", new EventHandlerFunction<>(InteractItemEvent.Secondary.OffHand.class));
        library.put("onItemMergeItem", new EventHandlerFunction<>(ItemMergeItemEvent.class));
        library.put("onKickPlayer", new EventHandlerFunction<>(KickPlayerEvent.class));
        library.put("onLaunchProjectile", new EventHandlerFunction<>(LaunchProjectileEvent.class));
        library.put("onLeashEntity", new EventHandlerFunction<>(LeashEntityEvent.class));
        library.put("onLightning", new EventHandlerFunction<>(LightningEvent.class));
        library.put("onPostLightning", new EventHandlerFunction<>(LightningEvent.Post.class));
        library.put("onPreLightning", new EventHandlerFunction<>(LightningEvent.Pre.class));
        library.put("onStrikeLightning", new EventHandlerFunction<>(LightningEvent.Strike.class));
        library.put("onLoadChunk", new EventHandlerFunction<>(LoadChunkEvent.class));
        library.put("onLoadWorld", new EventHandlerFunction<>(LoadWorldEvent.class));
        library.put("onMessageChannel", new EventHandlerFunction<>(MessageChannelEvent.class));
        library.put("onChatMessageChannel", new EventHandlerFunction<>(MessageChannelEvent.Chat.class));
        library.put("onMessage", new EventHandlerFunction<>(MessageEvent.class));
        library.put("onMoveEntity", new EventHandlerFunction<>(MoveEntityEvent.class));
        library.put("onTeleportMoveEntity", new EventHandlerFunction<>(MoveEntityEvent.Teleport.class));
        library.put("onTeleport.PortalMoveEntity", new EventHandlerFunction<>(MoveEntityEvent.Teleport.Portal.class));
        library.put("onNotifyNeighborBlock", new EventHandlerFunction<>(NotifyNeighborBlockEvent.class));
        library.put("onPardonIp", new EventHandlerFunction<>(PardonIpEvent.class));
        library.put("onPardonUser", new EventHandlerFunction<>(PardonUserEvent.class));
        library.put("onTargetPlayerPardonUser", new EventHandlerFunction<>(PardonUserEvent.TargetPlayer.class));
        library.put("onPlayerChangeClientSettings", new EventHandlerFunction<>(PlayerChangeClientSettingsEvent.class));
        library.put("onPopulateChunk", new EventHandlerFunction<>(PopulateChunkEvent.class));
        library.put("onPopulatePopulateChunk", new EventHandlerFunction<>(PopulateChunkEvent.Populate.class));
        library.put("onPostPopulateChunk", new EventHandlerFunction<>(PopulateChunkEvent.Post.class));
        library.put("onPrePopulateChunk", new EventHandlerFunction<>(PopulateChunkEvent.Pre.class));
        library.put("onPrimeExplosive", new EventHandlerFunction<>(PrimeExplosiveEvent.class));
        library.put("onPostPrimeExplosive", new EventHandlerFunction<>(PrimeExplosiveEvent.Post.class));
        library.put("onPrePrimeExplosive", new EventHandlerFunction<>(PrimeExplosiveEvent.Pre.class));
        library.put("onQueryServer", new EventHandlerFunction<>(QueryServerEvent.class));
        library.put("onBasicQueryServer", new EventHandlerFunction<>(QueryServerEvent.Basic.class));
        library.put("onFullQueryServer", new EventHandlerFunction<>(QueryServerEvent.Full.class));
        library.put("onRconConnection", new EventHandlerFunction<>(RconConnectionEvent.class));
        library.put("onConnectRconConnection", new EventHandlerFunction<>(RconConnectionEvent.Connect.class));
        library.put("onDisconnectRconConnection", new EventHandlerFunction<>(RconConnectionEvent.Disconnect.class));
        library.put("onLoginRconConnection", new EventHandlerFunction<>(RconConnectionEvent.Login.class));
        library.put("onResourcePackStatus", new EventHandlerFunction<>(ResourcePackStatusEvent.class));
        library.put("onRespawnPlayer", new EventHandlerFunction<>(RespawnPlayerEvent.class));
        library.put("onRideEntity", new EventHandlerFunction<>(RideEntityEvent.class));
        library.put("onDismountRideEntity", new EventHandlerFunction<>(RideEntityEvent.Dismount.class));
        library.put("onMountRideEntity", new EventHandlerFunction<>(RideEntityEvent.Mount.class));
        library.put("onSaveWorld", new EventHandlerFunction<>(SaveWorldEvent.class));
        library.put("onPostSaveWorld", new EventHandlerFunction<>(SaveWorldEvent.Post.class));
        library.put("onPreSaveWorld", new EventHandlerFunction<>(SaveWorldEvent.Pre.class));
        library.put("onSendCommand", new EventHandlerFunction<>(SendCommandEvent.class));
        library.put("onSetAITarget", new EventHandlerFunction<>(SetAITargetEvent.class));
        library.put("onSleeping", new EventHandlerFunction<>(SleepingEvent.class));
        library.put("onFinishSleeping", new EventHandlerFunction<>(SleepingEvent.Finish.class));
        library.put("onPostSleeping", new EventHandlerFunction<>(SleepingEvent.Post.class));
        library.put("onPreSleeping", new EventHandlerFunction<>(SleepingEvent.Pre.class));
        library.put("onTickSleeping", new EventHandlerFunction<>(SleepingEvent.Tick.class));
        library.put("onSmelt", new EventHandlerFunction<>(SmeltEvent.class));
        library.put("onConsumeFuelSmelt", new EventHandlerFunction<>(SmeltEvent.ConsumeFuel.class));
        library.put("onFinishSmelt", new EventHandlerFunction<>(SmeltEvent.Finish.class));
        library.put("onInterruptSmelt", new EventHandlerFunction<>(SmeltEvent.Interrupt.class));
        library.put("onStartSmelt", new EventHandlerFunction<>(SmeltEvent.Start.class));
        library.put("onTickSmelt", new EventHandlerFunction<>(SmeltEvent.Tick.class));
        library.put("onSpawnEntity", new EventHandlerFunction<>(SpawnEntityEvent.class));
        library.put("onChunkLoadSpawnEntity", new EventHandlerFunction<>(SpawnEntityEvent.ChunkLoad.class));
        library.put("onCustomSpawnEntity", new EventHandlerFunction<>(SpawnEntityEvent.Custom.class));
        library.put("onSpawnerSpawnEntity", new EventHandlerFunction<>(SpawnEntityEvent.Spawner.class));
        library.put("onTabComplete", new EventHandlerFunction<>(TabCompleteEvent.class));
        library.put("onChatTabComplete", new EventHandlerFunction<>(TabCompleteEvent.Chat.class));
        library.put("onCommandTabComplete", new EventHandlerFunction<>(TabCompleteEvent.Command.class));
        library.put("onTameEntity", new EventHandlerFunction<>(TameEntityEvent.class));
        library.put("onTargetAgent", new EventHandlerFunction<>(TargetAgentEvent.class));
        library.put("onTargetBlock", new EventHandlerFunction<>(TargetBlockEvent.class));
        library.put("onTargetChunk", new EventHandlerFunction<>(TargetChunkEvent.class));
        library.put("onTargetContainer", new EventHandlerFunction<>(TargetContainerEvent.class));
        library.put("onTargetEntity", new EventHandlerFunction<>(TargetEntityEvent.class));
        library.put("onTargetExplosive", new EventHandlerFunction<>(TargetExplosiveEvent.class));
        library.put("onTargetFusedExplosive", new EventHandlerFunction<>(TargetFusedExplosiveEvent.class));
        library.put("onTargetHumanoid", new EventHandlerFunction<>(TargetHumanoidEvent.class));
        library.put("onTargetInventory", new EventHandlerFunction<>(TargetInventoryEvent.class));
        library.put("onTargetItem", new EventHandlerFunction<>(TargetItemEvent.class));
        library.put("onTargetLiving", new EventHandlerFunction<>(TargetLivingEvent.class));
        library.put("onTargetPlayer", new EventHandlerFunction<>(TargetPlayerEvent.class));
        library.put("onTargetProjectile", new EventHandlerFunction<>(TargetProjectileEvent.class));
        library.put("onTargetTileEntity", new EventHandlerFunction<>(TargetTileEntityEvent.class));
        library.put("onTargetUser", new EventHandlerFunction<>(TargetUserEvent.class));
        library.put("onTargetWorld", new EventHandlerFunction<>(TargetWorldEvent.class));
        library.put("onTickBlock", new EventHandlerFunction<>(TickBlockEvent.class));
        library.put("onRandomTickBlock", new EventHandlerFunction<>(TickBlockEvent.Random.class));
        library.put("onScheduledTickBlock", new EventHandlerFunction<>(TickBlockEvent.Scheduled.class));
        library.put("onUnforcedChunk", new EventHandlerFunction<>(UnforcedChunkEvent.class));
        library.put("onUnleashEntity", new EventHandlerFunction<>(UnleashEntityEvent.class));
        library.put("onUnloadChunk", new EventHandlerFunction<>(UnloadChunkEvent.class));
        library.put("onUnloadWorld", new EventHandlerFunction<>(UnloadWorldEvent.class));
        library.put("onUseItemStack", new EventHandlerFunction<>(UseItemStackEvent.class));
        library.put("onFinishUseItemStack", new EventHandlerFunction<>(UseItemStackEvent.Finish.class));
        library.put("onReplaceUseItemStack", new EventHandlerFunction<>(UseItemStackEvent.Replace.class));
        library.put("onResetUseItemStack", new EventHandlerFunction<>(UseItemStackEvent.Reset.class));
        library.put("onStartUseItemStack", new EventHandlerFunction<>(UseItemStackEvent.Start.class));
        library.put("onStopUseItemStack", new EventHandlerFunction<>(UseItemStackEvent.Stop.class));
        library.put("onTickUseItemStack", new EventHandlerFunction<>(UseItemStackEvent.Tick.class));

    }

}
